<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Go on 达则兼济天下</title><link>https://www.liaol.net/tags/go/</link><description>Recent content in Go on 达则兼济天下</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Sun, 12 Apr 2020 23:21:41 +0800</lastBuildDate><atom:link href="https://www.liaol.net/tags/go/index.xml" rel="self" type="application/rss+xml"/><item><title>Go 多个goroutinue顺序打印数字</title><link>https://www.liaol.net/posts/goroutinue-print-in-order/</link><pubDate>Sun, 12 Apr 2020 23:21:41 +0800</pubDate><guid>https://www.liaol.net/posts/goroutinue-print-in-order/</guid><description>
一. 10个goroutinue顺序打印0-9 # 常规的做法是用10个channel来挨个控制，其实可以用原子包实现，相当于加锁
func printInOrder() { wg := sync.WaitGroup{} var curr int32 for i := int32(0); i &amp;lt; 10; i++ { wg.Add(1) go func(num int32) { defer wg.Done() for { if n := atomic.LoadInt32(&amp;amp;curr); n == num { fmt.Println(num) atomic.AddInt32(&amp;amp;curr, 1) break } time.Sleep(time.Nanosecond) } }(i) } wg.Wait() } 二. 两个goroutinue分别打印奇偶数 # 同上，还是用原子包
func printMix() { wg := sync.WaitGroup{} var curr int32 wg.Add(2) go func() { defer wg.Done() for curr &amp;lt; 10 { if n := atomic.</description></item><item><title>beego项目部署脚本</title><link>https://www.liaol.net/posts/beego-deploy-script/</link><pubDate>Wed, 20 Jan 2016 23:10:34 +0800</pubDate><guid>https://www.liaol.net/posts/beego-deploy-script/</guid><description>
&lt;p>　　准备上线用&lt;a href="http:beego.me">beego&lt;/a>写的一个小项目，在&lt;a href="https://www.vultr.com/freetrial">vultr&lt;/a>开了个日本节点，注册送50刀，免费用两个月，哈哈。&lt;br>
　　之前还真没部署过编译型语言项目（Java白学了），也没去折腾&lt;a href="http://capistranorb.com/">capistrano&lt;/a>了。参考beego的文档撸了个简单脚本，先凑合用吧。&lt;br>
　　&lt;/p></description></item></channel></rss>